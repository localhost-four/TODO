let boards = []; // –ú–∞—Å—Å–∏–≤ –¥–æ—Å–æ–∫
let boardCounter = 1; // –°—á—ë—Ç—á–∏–∫ –¥–æ—Å–æ–∫
let activeBoardId = null; // –ê–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
function openNewBoardTab() {
    addBoard(); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
    renderBoards(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫–∏
    saveStateToURL(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ URL
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function openAddTaskModal() {
    const modal = document.getElementById('addTaskModal');
    modal.style.display = 'block'; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.getElementById('addTaskModal');
    modal.style.display = 'none'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeSettings() {
    const modal = document.getElementById('settingsModal');
    modal.style.display = 'none'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
function addBoard() {
    const boardId = `board${boardCounter++}`;
    const newBoard = {
        id: boardId,
        name: `Board ${boardCounter - 1}`,
        emoji: 'üìù',
        backgroundColor: '#ffffff',
        textColor: '#000000',
        style: 'flex',
        tasks: []
    };

    boards.push(newBoard);
    renderBoards(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫–∏
    saveStateToURL(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ URL
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ—Å–æ–∫
function renderBoards() {
    const tabsContainer = document.getElementById('tabs');
    const taskContainer = document.getElementById('task-container');
    tabsContainer.innerHTML = '';
    taskContainer.innerHTML = '';

    boards.forEach(board => {
        const tabButton = document.createElement('button');
        tabButton.classList.add('tab');
        tabButton.innerHTML = `${board.emoji} ${board.name}`;
        tabButton.onclick = () => openBoard(board.id);
        tabButton.ondblclick = () => openSettings(board.id);
        tabsContainer.appendChild(tabButton);

        const taskBoard = document.createElement('div');
        taskBoard.id = board.id;
        taskBoard.classList.add('task-board');
        taskBoard.style.backgroundColor = board.backgroundColor;
        taskBoard.style.color = board.textColor;
        taskBoard.style.display = 'none';
        taskBoard.style.display = board.style;
        taskContainer.appendChild(taskBoard);

        renderTasks(board); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å–∫–∏
function openBoard(boardId) {
    const selectedBoard = boards.find(board => board.id === boardId);
    const taskBoards = document.querySelectorAll('.task-board');
    taskBoards.forEach(board => {
        if (board.id === boardId) {
            board.style.display = selectedBoard.style;
        } else {
            board.style.display = 'none';
        }
    });
    activeBoardId = boardId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function addTask() {
    const title = document.getElementById('taskTitle').value;
    const deadline = document.getElementById('taskDeadline').value;
    const description = document.getElementById('taskDescription').value;
    const imageUrl = document.getElementById('taskImageUrl').value;
    const link = document.getElementById('taskLink').value;
    const priority = document.getElementById('taskPriority').value;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!title || !deadline) {
        alert('Please fill out both title and deadline!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const isValidImageUrl = imageUrl && (imageUrl.match(/\.(jpeg|jpg|gif|png)$/) !== null);

    if (imageUrl && !isValidImageUrl) {
        alert('Please provide a valid image URL!');
        return;
    }

    const task = {
        id: `task${Date.now()}`,
        title,
        deadline,
        description,
        imageUrl, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        link,
        priority,
        comments: [], 
    };

    const board = boards.find(b => b.id === activeBoardId);
    if (!board) {
        alert('Board not found');
        return;
    }

    board.tasks.push(task);
    renderBoards();
    closeModal();
    saveStateToURL(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ URL

}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function editTask(boardId, taskId) {
    const board = boards.find(b => b.id === boardId);
    const task = board.tasks.find(t => t.id === taskId);

    if (task) {
        document.getElementById('taskTitle').value = task.title;
        document.getElementById('taskDescription').value = task.description;
        document.getElementById('taskDeadline').value = task.deadline;
        document.getElementById('taskImageUrl').value = task.imageUrl;
        document.getElementById('taskLink').value = task.link;
        document.getElementById('taskPriority').value = task.priority;
        openAddTaskModal();  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function deleteTask(boardId, taskId) {
    const board = boards.find(b => b.id === boardId);
    if (board) {
        board.tasks = board.tasks.filter(task => task.id !== taskId);
        renderBoards();
        saveStateToURL();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏
function deleteBoard(boardId) {
    boards = boards.filter(board => board.id !== boardId);
    renderBoards();
    saveStateToURL();
}

function renderTasks(board) {
    const taskBoard = document.getElementById(board.id);
    taskBoard.innerHTML = '';

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ
    board.tasks.sort((a, b) => {
        if (a.priority !== b.priority) {
            return b.priority - a.priority; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        }
        return new Date(a.deadline) - new Date(b.deadline); // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã
    });

    board.tasks.forEach(task => {
        const taskCard = document.createElement('div');
        taskCard.classList.add('task-card');
        taskCard.innerHTML = `
            <h3>${task.title}</h3>
            <p>${task.description}</p>
            <p>Deadline: ${task.deadline}</p>
            <p>Priority: ${task.priority}</p>
            <button onclick="openCommentModal('${board.id}', '${task.id}')">Add Comment</button>
            <button onclick="editTask('${board.id}', '${task.id}')">Clone</button>
            <button onclick="deleteTask('${board.id}', '${task.id}')">Delete</button>
            <div class="comments">
                ${task.comments.map(comment => {
                    let commentHtml = `<p>${comment.text || ''}</p>`;
                    if (comment.imageUrl) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ URL
                        commentHtml += `<img src="${comment.imageUrl}" alt="Image" class="file-preview" />`;
                    }
                    return commentHtml;
                }).join('')}
            </div>
            ${task.imageUrl ? `<img src="${task.imageUrl}" alt="Image" class="file-preview" />` : ''}
            ${task.link ? `<a href="${task.link}" target="_blank">Open Link</a>` : ''}
        `;
        taskBoard.appendChild(taskCard);
    });
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
function renderFilePreview(file) {
    if (file && file.type && file.type.startsWith('image')) {
        return `<img src="${URL.createObjectURL(file)}" alt="Image Preview" class="file-preview" />`;
    }
    if (file && file.type === 'image/svg+xml') {
        return `<object data="${URL.createObjectURL(file)}" type="image/svg+xml" class="file-preview"></object>`;
    }
    return `<p>File: ${file.name}</p>`;
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ LocalStorage
function saveStateToLocalStorage() {
    const state = {
        boards,
        activeBoardId,
        theme: document.body.classList.contains('dark-theme') ? 'dark' : 'light'
    };
    localStorage.setItem('todoAppState', JSON.stringify(state));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ LocalStorage
function loadStateFromLocalStorage() {
    const state = localStorage.getItem('todoAppState');
    if (state) {
        try {
            const parsedState = JSON.parse(state);
            boards = parsedState.boards || [];
            activeBoardId = parsedState.activeBoardId || null;
            if (parsedState.theme) {
                document.body.classList.add(parsedState.theme === 'dark' ? 'dark-theme' : 'light-theme');
            }
            renderBoards();
        } catch (error) {
            console.error('Error loading state from LocalStorage:', error);
        }
    }
}





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ URL
function saveStateToURL() {
    const state = {
        boards,
        activeBoardId,
        theme: document.body.classList.contains('dark-theme') ? 'dark' : 'light'
    };
    const encodedState = encodeURIComponent(JSON.stringify(state));
    window.history.replaceState(null, '', `?state=${encodedState}`);
    saveStateToLocalStorage();
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ URL
function loadStateFromURL() {
    const params = new URLSearchParams(window.location.search);
    const stateParam = params.get('state');

    if (stateParam) {
        try {
            const state = JSON.parse(decodeURIComponent(stateParam));
            boards = state.boards || [];
            activeBoardId = state.activeBoardId || null;
            if (state.theme) {
                document.body.classList.add(state.theme === 'dark' ? 'dark-theme' : 'light-theme');
            }
            renderBoards();
        } catch (error) {
            console.error('Error loading state from URL:', error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å–∫–∏
function openSettings(boardId) {
    const board = boards.find(b => b.id === boardId);
    if (!board) return;

    document.getElementById('emojiInput').value = board.emoji;
    document.getElementById('backgroundColorInput').value = board.backgroundColor;
    document.getElementById('textColorInput').value = board.textColor;
    document.getElementById('styleInput').value = board.style;

    const settingsModal = document.getElementById('settingsModal');
    settingsModal.style.display = 'block';
    settingsModal.onclick = (event) => event.stopPropagation(); // –ß—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∞–º—É –º–æ–¥–∞–ª–∫—É
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å–∫–∏
function applyBoardSettings() {
    const emoji = document.getElementById('emojiInput').value;
    const backgroundColor = document.getElementById('backgroundColorInput').value;
    const textColor = document.getElementById('textColorInput').value;
    const style = document.getElementById('styleInput').value;

    const board = boards.find(b => b.id === activeBoardId);
    if (!board) return;

    board.emoji = emoji;
    board.backgroundColor = backgroundColor;
    board.textColor = textColor;
    board.style = style;

    renderBoards();
    saveStateToURL();
    closeSettings();
}

function openCommentModal(boardId, taskId) {
    const modal = document.getElementById('commentModal');
    const task = boards.find(board => board.id === boardId).tasks.find(task => task.id === taskId);

    if (task) {
        modal.style.display = 'block';

        const saveCommentBtn = document.getElementById('saveCommentBtn');
        saveCommentBtn.onclick = function() {
            const comment = document.getElementById('commentText').value;
            const imageUrl = document.getElementById('urlInput').value;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            const isValidImageUrl = imageUrl && (imageUrl.match(/\.(jpeg|jpg|gif|png)$/) !== null);
            if (imageUrl && !isValidImageUrl) {
                alert('Please provide a valid image URL!');
                return;
            }

            if (comment || imageUrl) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if (imageUrl) {
                    task.comments.push({ text: comment, imageUrl });
                } else {
                    task.comments.push({ text: comment });
                }

                renderTasks(boards.find(board => board.id === boardId));  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                saveStateToURL();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ URL
                closeCommentModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            }
        };
    }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function closeCommentModal() {
    const modal = document.getElementById('commentModal');
    modal.style.display = 'none'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

function copy() {

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Clipboard API –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    navigator.clipboard.writeText(window.location.href)
    .then(function() {
        null;
    })
    .catch(function(err) {
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert("Error: " + err);
    });

    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    window.location.href.select();
    window.location.href.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

    // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    document.execCommand('copy');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ URL –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
window.onload = loadStateFromURL;